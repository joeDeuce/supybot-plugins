from urllib import urlencode, quote
from urllib2 import urlopen
from sgmllib import SGMLParser
from random import randint
from xml.etree import ElementTree as ET

from supybot.commands import *
import supybot.plugins as plugins
import supybot.ircmsgs as ircmsgs
import supybot.ircutils as ircutils
import supybot.callbacks as callbacks
import feedparser
import sys

class AudioScrobbler(callbacks.Privmsg):
    userlist = [
    	'joeDeuce',
    	'jmad980',
    	'omp',
    	'kelnoky',
    	'Wintervenom',
    	'huntermhaxx',
    	'DJMelik',
    	'Sudokode',
    	'goffa2',
    	'ememessien',
    	'vintendo',
    	'wizzomafizzo',
    	'g0ju',
    	'Dream_Team',
    	'Nisstyre'
    	]
    	

    users = dict({
        'joeDeuce': 'joeDeuce', 
        'melik': 'DJMelik',
        'Wunderkind': 'ememessien', 
        'Wunderbar': 'ememessien', 
        'goffa': 'goffa2',
        'sudokode': 'Sudokode', 
        'vin': 'vintendo', 
        'glibc': 'Wintervenom', 
        'OpenVMS': 'Wintervenom', 
        'Wvm': 'Wintervenom', 
        'Svm': 'Wintervenom', 
        'Demonpit': 'Wintervenom', 
        'Demonpit-SPC': 'Wintervenom', 
        'Satan_Christ': 'Wintervenom', 
        'wizzo': 'wizzomafizzo',
        'hunterm': 'huntermhaxx', 
        'gju': 'g0ju',
        'dteam': 'Dream_Team',
        'Nisstyre': 'Nisstyre56'
        })
    
    
    userlist.sort()

    apikey = 'af2a42bb92738f28c3d8670fb2a5c12c'

    def compare(self,irc,msg,args):
        """<user> <user>
        Ask Wintervenom if you can't figure it out, n00b! 
        
        """
        import supybot.feedparser as feedparser
        import supybot.feedparser as feedparser
        import socket
        socket.setdefaulttimeout(60)
        if len(args) != 2:
          irc.reply("need exactly 2 nicks dumbass!")
        else:
        
          try: 
            usern1 = self.users[args[0]]
          except KeyError:
            usern1 = args[0]
          
          try:
            usern2 = self.users[args[1]]
          except KeyError:
            usern2 = args[1]
          
          url = 'http://ws.audioscrobbler.com/2.0/?method=tasteometer.compare&type1=user&type2=user&value1=' + usern1 + '&value2=' + usern2 + '&api_key=af2a42bb92738f28c3d8670fb2a5c12c&limit=20'
          try:
              response = urlopen(url)
          except:
              irc.reply("no such artist(s) or last.fm is on the fritz")
              return
          


          tree = ET.parse(response)
          root = tree.getroot()
          names = []
          
          for score in root.findall('.//score'):
              finalscore = score.text
          for name in root.findall('.//name'):
              names.append(name.text)
          finalscor = str(int(eval(finalscore) * 100 + .5))
          if len(names) == 2:
              irc.reply('Compatability: 0')
          elif len(names) > 2:
              names.pop(-1)
              names.pop(-1)
              irc.reply('Compatability: ' + finalscor + ' - Common Artists: ' + ', '.join(names).encode('utf8','ignore'))
          else:
              irc.reply("no such artist(s) or last.fm is on the fritz") 
                            

    def get_songs(self,username):
        import supybot.feedparser as feedparser
        import socket
        
        
        try:
          usernam = self.users[username]
        except KeyError:
          usernam = username
                                                    
        
        
        
        socket.setdefaulttimeout(60)
        url = 'http://ws.audioscrobbler.com/1.0/user/%s/recenttracks.rss'
        songs = []
        rss = feedparser.parse(url % usernam)
        for entry in rss.entries:
            songs.append(entry.title.encode('utf8','ignore'))
        return songs

    def tunes(self,irc,msg,args):
        """tunes [user]

        see what [user] last listened to - if [user] is ommitted,
        return the caller's last heard (nick must match last.fm username
        """
        username = ''.join(args)
        if username == '': username = msg.nick
        songs = self.get_songs(username)
        if len(songs) > 0:
            irc.reply(songs[0])
        else:
            irc.reply("i dunno what %s last listened to" % username)

    def alltunes(self,irc,msg,args):
        """alltunes <username>

        see the full list of tunes username listened to.
        """
        username = ''.join(args)
        irc.reply( ' || '.join(self.get_songs(username)) )

    def blockparty(self,irc,msg,args):
        """blockparty

        See what people in the group are listening to
        """
        tunes = ""
        for user in self.userlist:
            songs = self.get_songs(user)
            if len(songs) > 0:
                tunes += "[%s: %s]  " % (user,songs[0])
        irc.reply(tunes)

#    def add(self,irc,msg,args):
#        """add username, or comma separated list of usrs
#
#        adds a user to the blockparty
#        """
#        for user in args:
#            # in case commas were used instead of spaces
#            for u in user.split(','):
#                self.users.append(u)
#        irc.reply(','.join(args) + " just moved in across the street")

    def favs(self,irc,msg,args):
        """get users favorite artists
        """
        if len(args) != 1:
          irc.reply("forgot the username")
        else:
          
          try:
            username = self.users[args[0]]
          except KeyError:
            username = args[0]
          favs = []
          try:
            url = "http://ws.audioscrobbler.com/1.0/user/%s/topartists.txt" % username
            for row in urlopen(url):
                favs.append(row.split(',')[2].strip("\n"))
                if len(favs) >= 20:
                    break
            irc.reply(', '.join(favs).encode('utf8', 'ignore'))
          except:
            irc.reply('no such user or last.fm is on the fritz')

#    def list(self,irc,msg,args):
#        irc.reply( ",".join(self.users) )

    def recommend(self,irc,msg,args):
        artist = quote(' '.join(args))
        if artist.lower() == 'lightning%20bolt':
          irc.reply("I recommend you listen to something else...")
          return

        self.log.info(artist.lower())
        if (artist.lower() == 'motley%20crue'):
            irc.reply("No.")
            return

        url = 'http://ws.audioscrobbler.com/1.0/artist/%s/similar.xml' % artist
        try:
            response = urlopen(url)
        except:
            irc.reply("no such artist or last.fm is on the fritz")
            return

        tree = ET.parse(response)
        root = tree.getroot()
        names = []
        for name in root.findall('.//name'):
            names.append(name.text)
        irc.reply(', '.join(names).encode('utf8','ignore'))

    def weeklies(self,irc,msg,args):
      """weekly top 10 for a last.fm user
      """
      if len(args) == 0:
        irc.reply("forgot username")
        return
      try:
        user = self.users[args[0]]
      except KeyError:
        user = args[0]
      url = 'http://ws.audioscrobbler.com/1.0/user/%s/weeklytrackchart.xml' % user
      try:
          response = urlopen(url)
      except:
          irc.reply("no such user or last.fm is on the fritz")
          return

      tree = ET.parse(response)
      root = tree.getroot()
      tracks = []
      for track in root.findall('.//track'):
          artist = track.find('.//artist').text
          title = track.find('.//name').text
          count = track.find('.//playcount').text
          tracks.append("%s - %s [%s]" % (artist, title, count))
      irc.reply('; '.join(tracks).encode('utf8','ignore'))


    def tags(self,irc,msg,args):
        artist = quote(' '.join(args))
        url = "http://ws.audioscrobbler.com/1.0/artist/%s/toptags.xml" % artist
        try:
            response = urlopen(url)
        except:
            irc.reply("no such artist or last.fm is on the fritz")
            return

        tree = ET.parse(response)
        root = tree.getroot()
        tags = []
        for tag in root.findall('.//tag'):
            name = tag.find(".//name")
            count = tag.find(".//count")
            tags.append("%s:%s" % (name.text, count.text))
        irc.reply(', '.join(tags).encode('utf8','ignore'))

    def topten(self,irc,msg,args):
        try:
          usernam = self.users[args[0]]
        except KeyError:
          usernam = args[0]
        url = "http://ws.audioscrobbler.com/1.0/user/%s/weeklytrackchart.xml" % usernam
        try:
            response = urlopen(url)
        except:
            irc.reply("d'oh can't get the weekly track chart :(")
            return
        tree = ET.parse(response)
        root = tree.getroot()
        tracks = []
        for track in root.findall('.//track'):
            artist = track.find('.//artist')
            name = track.find('.//name')
            tracks.append("%s:%s" % (artist.text.strip(), name.text.strip()))
        irc.reply(', '.join(tracks).encode('utf8','ignore'))

    def topten2(self,irc,msg,args):
        try:
          usernam = self.users[args[0]]
        except KeyError:
          usernam = args[0]
        url = "http://ws.audioscrobbler.com/1.0/user/%s/weeklyartistchart.xml" % usernam
        try:
            response = urlopen(url)
        except:
            irc.reply("d'oh can't get the weekly artist chart :(")
            return
        tree = ET.parse(response)
        root = tree.getroot()
        artists = []
        for track in root.findall('.//artist'):
            name = track.find('.//name')
            artists.append(name.text.strip())
        irc.reply(', '.join(artists).encode('utf8','ignore'))

    def tagged (self,irc,msg,args):
        tag = quote(' '.join(args))
        url = "http://ws.audioscrobbler.com/1.0/tag/%s/topartists.xml" % tag
        self.log.info(url)
        try:
            response = urlopen(url)
        except:
            irc.reply("no such tag or last.fm is on the fritz")
            return

        tree = ET.parse(response)
        root = tree.getroot()
        tags = []
        for artist in root.findall('.//artist'):
            tags.append("%s:%s" % (artist.attrib['name'],
                artist.attrib['count']))
        irc.reply(', '.join(tags).encode('utf8','ignore'))

Class = AudioScrobbler
